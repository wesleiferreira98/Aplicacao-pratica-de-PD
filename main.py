#!/usr/bin/env python3
"""
Aplica√ß√£o Pr√°tica de Programa√ß√£o Din√¢mica
Implementa√ß√£o e compara√ß√£o de algoritmos usando diferentes paradigmas
"""

import sys
from pathlib import Path


def print_banner():
    """Exibe banner do projeto"""
    print("=" * 70)
    print("  Aplica√ß√£o Pr√°tica de Programa√ß√£o Din√¢mica")
    print("  Compara√ß√£o de Paradigmas: DP, Divide & Conquer, Backtracking")
    print("=" * 70)
    print()


def show_menu():
    """Exibe menu principal"""
    print("\nüìã Menu Principal:")
    print("1. Experimento: LIS (Longest Increasing Subsequence)")
    print("2. Experimento: Edit Distance")
    print("3. Experimento: Subset Sum")
    print("4. Executar todos os experimentos")
    print("5. Visualizar resultados salvos")
    print("6. Sobre o projeto")
    print("0. Sair")
    print()


def run_lis_experiment():
    """Executa experimento LIS"""
    from experiments.experiment_lis import run_lis_experiment
    run_lis_experiment()


def run_edit_distance_experiment():
    """Executa experimento Edit Distance"""
    from experiments.experiment_edit_distance import run_edit_distance_experiment
    run_edit_distance_experiment()


def run_subset_sum_experiment():
    """Executa experimento Subset Sum"""
    from experiments.experiment_subset_sum import run_subset_sum_experiment
    run_subset_sum_experiment()


def run_all_experiments():
    """Executa todos os experimentos"""
    print("\nüöÄ Executando todos os experimentos...\n")
    run_lis_experiment()
    print("\n" + "-" * 70 + "\n")
    run_edit_distance_experiment()
    print("\n" + "-" * 70 + "\n")
    run_subset_sum_experiment()


def show_results():
    """Mostra resultados salvos"""
    results_dir = Path("results/logs")
    
    if not results_dir.exists():
        print("\n‚ö†Ô∏è  Nenhum resultado encontrado.")
        return
    
    results = list(results_dir.glob("*.json"))
    
    if not results:
        print("\n‚ö†Ô∏è  Nenhum resultado salvo ainda.")
        return
    
    print("\nüìä Resultados dispon√≠veis:")
    for i, result in enumerate(results, 1):
        print(f"{i}. {result.name}")


def show_about():
    """Exibe informa√ß√µes sobre o projeto"""
    print("\n" + "=" * 70)
    print("üìñ Sobre o Projeto")
    print("=" * 70)
    print("""
Este projeto implementa e compara algoritmos cl√°ssicos usando diferentes
paradigmas de programa√ß√£o:

üîπ Programa√ß√£o Din√¢mica (DP)
  - Otimiza√ß√£o atrav√©s de subproblemas sobrepostos
  - T√©cnicas: memoization e tabulation

üîπ Divis√£o e Conquista (D&C)
  - Divide problema, resolve e combina solu√ß√µes
  - √ötil para problemas divis√≠veis independentes

üîπ Backtracking
  - Busca exaustiva com poda inteligente
  - Encontra todas as solu√ß√µes poss√≠veis

üìä Algoritmos Implementados:
  - LIS (Longest Increasing Subsequence)
  - Edit Distance (Levenshtein)
  - Subset Sum
  - N-Queens

üéØ Recursos:
  - Coleta autom√°tica de m√©tricas (tempo, opera√ß√µes, mem√≥ria)
  - Gera√ß√£o de visualiza√ß√µes comparativas
  - Experimentos reproduz√≠veis
  - Documenta√ß√£o detalhada

üìÅ Estrutura modular e extens√≠vel para f√°cil adi√ß√£o de novos algoritmos.

Para mais informa√ß√µes, veja a documenta√ß√£o em docs/
    """)
    print("=" * 70)


def main():
    """Fun√ß√£o principal"""
    print_banner()
    
    while True:
        show_menu()
        
        try:
            choice = input("Escolha uma op√ß√£o: ").strip()
            
            if choice == "0":
                print("\nüëã At√© logo!")
                sys.exit(0)
            
            elif choice == "1":
                run_lis_experiment()
            
            elif choice == "2":
                run_edit_distance_experiment()
            
            elif choice == "3":
                run_subset_sum_experiment()
            
            elif choice == "4":
                run_all_experiments()
            
            elif choice == "5":
                show_results()
            
            elif choice == "6":
                show_about()
            
            else:
                print("\n‚ùå Op√ß√£o inv√°lida! Tente novamente.")
        
        except KeyboardInterrupt:
            print("\n\nüëã At√© logo!")
            sys.exit(0)
        
        except Exception as e:
            print(f"\n‚ùå Erro: {e}")
            import traceback
            traceback.print_exc()


if __name__ == "__main__":
    main()
